name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
      - master
      - refs/tags/v*

pool:
  vmImage: 'ubuntu-latest'

variables:
  versionSuffix: ci-$(Build.BuildNumber)

jobs:
  - job: Build_Master
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: 6.0.x
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: 8.0.x

    - script: dotnet test -c Release --logger trx
      displayName: dotnet test
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'

  # ========================================
  - job: Build_PullRequest
    condition: startsWith(variables['Build.SourceBranch'], 'refs/pull')
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: 6.0.x
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: 8.0.x
    - script: dotnet test -c Release --logger trx
      displayName: dotnet test
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'

#  # ========================================
#  - job: Release
#    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
#    steps:
#    - task: UseDotNet@2
#      inputs:
#        packageType: 'sdk'
#        useGlobalJson: true
#
#    - script: |
#        echo "##vso[task.setvariable variable=versionSuffix]"
#      displayName: Unset version suffix
#      condition: not(contains(variables['Build.SourceBranchName'], '-preview'))
#
#    - script: |
#        VERSION_SUFFIX=$(echo $BUILD_SOURCEBRANCHNAME | sed 's|^v[^-]*-||')
#        echo "VersionSuffix: $VERSION_SUFFIX"
#        echo "##vso[task.setvariable variable=versionSuffix]$VERSION_SUFFIX"
#      displayName: Set version suffix for preview
#      condition: contains(variables['Build.SourceBranchName'], '-preview')
#
#    - script: dotnet restore
#      displayName: dotnet restore
#
#    - script: dotnet build -c Release
#      displayName: dotnet build
#
#    - script: dotnet pack -c Release --no-build --version-suffix "$(versionSuffix)" -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg --output $BUILD_ARTIFACTSTAGINGDIRECTORY ./src/Cocona/Cocona.csproj
#      displayName: dotnet pack Cocona
#    - script: dotnet pack -c Release --no-build --version-suffix "$(versionSuffix)" -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg --output $BUILD_ARTIFACTSTAGINGDIRECTORY ./src/Cocona.Core/Cocona.Core.csproj
#      displayName: dotnet pack Cocona.Core
#    - script: dotnet pack -c Release --no-build --version-suffix "$(versionSuffix)" -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg --output $BUILD_ARTIFACTSTAGINGDIRECTORY ./src/Cocona.Lite/Cocona.Lite.csproj
#      displayName: dotnet pack Cocona.Lite
#
#    # Publish to NuGet.org
#    - task: NuGetCommand@2
#      inputs:
#        command: 'push'
#        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.snupkg'
#        nuGetFeedType: 'external'
#        publishFeedCredentials: 'NuGet.org (mayuki)'
